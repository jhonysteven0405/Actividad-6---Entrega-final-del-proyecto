from flask import Flask, redirect, url_for, session, request, render_template
from authlib.integrations.flask_client import OAuth
from flask_sqlalchemy import SQLAlchemy
import os

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY', 'your_secret_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///users.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', 'your_client_id')
    GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', 'your_client_secret')
    GOOGLE_DISCOVERY_URL = (
        'https://accounts.google.com/.well-known/openid-configuration'
    )

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(150), unique=True, nullable=False)
    name = db.Column(db.String(150), nullable=False)
    info = db.Column(db.Text, nullable=True)

    def __init__(self, email, name):
        self.email = email
        self.name = name

class OAuthManager:
    def __init__(self, app):
        self.oauth = OAuth(app)
        self.google = self.oauth.register(
            name='google',
            client_id=app.config['GOOGLE_CLIENT_ID'],
            client_secret=app.config['GOOGLE_CLIENT_SECRET'],
            server_metadata_url=app.config['GOOGLE_DISCOVERY_URL'],
            client_kwargs={'scope': 'openid email profile'}
        )

    def login(self):
        return self.google.authorize_redirect(url_for('authorize', _external=True))

    def authorize(self):
        token = self.google.authorize_access_token()
        user_info = self.google.parse_id_token(token)
        return user_info

class UserManager:
    @staticmethod
    def get_or_create_user(email, name):
        user = User.query.filter_by(email=email).first()
        if not user:
            user = User(email=email, name=name)
            db.session.add(user)
            db.session.commit()
        return user

class Application:
    def __init__(self):
        self.app = Flask(__name__)
        self.app.config.from_object(Config)
        self.db = SQLAlchemy(self.app)
        global db
        db = self.db

        with self.app.app_context():
            self.db.create_all()

        self.oauth_manager = OAuthManager(self.app)
        self.set_routes()

    def set_routes(self):
        app = self.app

        @app.route('/')
        def index():
            user_email = session.get('email')
            if not user_email:
                return redirect(url_for('login'))

            user = User.query.filter_by(email=user_email).first()
            return render_template('dashboard.html', user=user)

        @app.route('/login')
        def login():
            return self.oauth_manager.login()

        @app.route('/authorize')
        def authorize():
            user_info = self.oauth_manager.authorize()
            if user_info:
                user = UserManager.get_or_create_user(user_info['email'], user_info['name'])
                session['email'] = user.email
                return redirect(url_for('index'))
            return 'Authorization failed.', 401

        @app.route('/logout')
        def logout():
            session.pop('email', None)
            return redirect(url_for('index'))

        @app.route('/agregar_informacion', methods=['GET', 'POST'])
        def agregar_informacion():
            user_email = session.get('email')
            if not user_email:
                return redirect(url_for('login'))

            user = User.query.filter_by(email=user_email).first()
            if request.method == 'POST':
                user.info = request.form['info']
                db.session.commit()
                return redirect(url_for('index'))

            return render_template('agregar_informacion.html', user=user)

    def run(self):
        self.app.run(debug=True)

if __name__ == '__main__':
    application = Application()
    application.run()
