import sqlite3
from flask import Flask, render_template, request, redirect, url_for, session
from flask_oauthlib.client import OAuth

# Configuración de la aplicación Flask
app = Flask(__name__)
app.secret_key = 'tu_clave_secreta'
oauth = OAuth(app)

# Configuración del cliente OAuth para Google
google = oauth.remote_app(
    'google',
    consumer_key='TU_CLIENT_ID',
    consumer_secret='TU_CLIENT_SECRET',
    request_token_params={
        'scope': 'email'
    },
    base_url='https://www.googleapis.com/oauth2/v1/',
    request_token_url=None,
    access_token_method='POST',
    access_token_url='https://accounts.google.com/o/oauth2/token',
    authorize_url='https://accounts.google.com/o/oauth2/auth'
)

# Clase para la gestión de usuarios
class Usuario:
    def __init__(self, email):
        self.email = email

    def guardar(self):
        with sqlite3.connect('usuarios.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS usuarios (email TEXT PRIMARY KEY)''')
            cursor.execute('INSERT OR IGNORE INTO usuarios (email) VALUES (?)', (self.email,))
            conn.commit()

# Clase para la gestión de información de usuarios
class Informacion:
    def __init__(self, usuario_email, contenido):
        self.usuario_email = usuario_email
        self.contenido = contenido

    def guardar(self):
        with sqlite3.connect('usuarios.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS informacion (id INTEGER PRIMARY KEY, usuario_email TEXT, contenido TEXT)''')
            cursor.execute('INSERT INTO informacion (usuario_email, contenido) VALUES (?, ?)', (self.usuario_email, self.contenido))
            conn.commit()

# Ruta principal
@app.route('/')
def index():
    return render_template('index.html')

# Ruta para iniciar sesión con Google
@app.route('/login')
def login():
    return google.authorize(callback=url_for('authorized', _external=True))

# Ruta de autorización
@app.route('/login/authorized')
def authorized():
    response = google.authorized_response()
    if response is None or response.get('access_token') is None:
        return 'Acceso denegado: motivo={} error={}'.format(
            request.args['error_reason'],
            request.args['error_description']
        )

    session['google_token'] = (response['access_token'], '')
    user_info = google.get('userinfo')
    user_email = user_info.data['email']

    usuario = Usuario(user_email)
    usuario.guardar()

    session['usuario'] = user_email
    return redirect(url_for('dashboard'))

# Ruta para el panel principal
@app.route('/dashboard', methods=['GET', 'POST'])
def dashboard():
    if 'usuario' not in session:
        return redirect(url_for('index'))

    email_usuario = session['usuario']
    if request.method == 'POST':
        contenido = request.form['contenido']
        info = Informacion(email_usuario, contenido)
        info.guardar()

    with sqlite3.connect('usuarios.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT contenido FROM informacion WHERE usuario_email = ?', (email_usuario,))
        datos = cursor.fetchall()

    return render_template('dashboard.html', usuario=email_usuario, datos=datos)

# Cerrar sesión
@app.route('/logout')
def logout():
    session.pop('usuario', None)
    return redirect(url_for('index'))

# Token de autenticación
@google.tokengetter
def get_google_oauth_token():
    return session.get('google_token')

if __name__ == '__main__':
    app.run(debug=True)
